{"authors": [{"first": "Hardik", "last": "Soni"}, {"first": "Myriana", "last": "Rifai"}, {"first": "Praveen", "last": "Kumar"}, {"first": "Ryan", "last": "Doenges"}, {"first": "Nate", "last": "Foster"}], "title": "Composing Dataplane Programs with \u03bcP4", "year": "2020", "isbn": "9781450379557", "publisher": "Association for Computing Machinery", "address": "New York, NY, USA", "url": "https://doi.org/10.1145/3387514.3405872", "doi": "10.1145/3387514.3405872", "abstract": "Dataplane languages like P4 enable flexible and efficient packet-processing using domain-specific primitives such as programmable parsers and match-action tables. Unfortunately, P4 programs tend to be monolithic and tightly coupled to the hardware architecture, which makes it hard to write programs in a portable and modular way---e.g., by composing reusable libraries of standard protocols.To address this challenge, we present the design and implementation of a novel framework (\u03bcP4) comprising a lightweight logical architecture that abstracts away from the structure of the underlying hardware pipelines and naturally supports powerful forms of program composition. Using examples, we show how enables modular programming. We present a prototype of the compiler that generates code for multiple lower-level architectures, including Barefoot's Tofino Native Architecture. We evaluate the overheads induced by our compiler on realistic examples.", "booktitle": "Proceedings of the Annual Conference of the ACM Special Interest Group on Data Communication on the Applications, Technologies, Architectures, and Protocols for Computer Communication", "numpages": "15", "keywords": ["Programmable dataplanes", "Modularity", "Composition", "P4"], "location": "Virtual Event, USA", "series": "SIGCOMM '20"}