{"authors": [{"first": "Xiangyu", "last": "Gao"}, {"first": "Taegyun", "last": "Kim"}, {"first": "Michael D.", "last": "Wong"}, {"first": "Divya", "last": "Raghunathan"}, {"first": "Aatish Kishan", "last": "Varma"}, {"first": "Pravein Govindan", "last": "Kannan"}, {"first": "Anirudh", "last": "Sivaraman"}, {"first": "Srinivas", "last": "Narayana"}, {"first": "Aarti", "last": "Gupta"}], "title": "Switch Code Generation Using Program Synthesis", "year": "2020", "isbn": "9781450379557", "publisher": "Association for Computing Machinery", "address": "New York, NY, USA", "url": "https://doi.org/10.1145/3387514.3405852", "doi": "10.1145/3387514.3405852", "abstract": "Writing packet-processing programs for programmable switch pipelines is challenging because of their all-or-nothing nature: a program either runs at line rate if it can fit within pipeline resources, or does not run at all. It is the compiler's responsibility to fit programs into pipeline resources. However, switch compilers, which use rewrite rules to generate switch machine code, often reject programs because the rules fail to transform programs into a form that can be mapped to a pipeline's limited resources---even if a mapping actually exists.This paper presents a compiler, Chipmunk, which formulates code generation as a program synthesis problem. Chipmunk uses a program synthesis engine, SKETCH, to transform high-level programs down to switch machine code. However, naively formulating code generation as program synthesis can lead to long compile times. Hence, we develop a new domain-specific synthesis technique, slicing, which reduces compile times by 1-387x and 51x on average.Using a switch hardware simulator, we show that Chipmunk compiles many programs that a previous rule-based compiler, Domino, rejects. Chipmunk also produces machine code with fewer pipeline stages than Domino. A Chipmunk backend for the Tofino programmable switch shows that program synthesis can produce machine code for high-speed switches.", "booktitle": "Proceedings of the Annual Conference of the ACM Special Interest Group on Data Communication on the Applications, Technologies, Architectures, and Protocols for Computer Communication", "numpages": "18", "keywords": ["code generation", "packet processing pipelines", "program synthesis", "slicing", "Programmable switches"], "location": "Virtual Event, USA", "series": "SIGCOMM '20"}